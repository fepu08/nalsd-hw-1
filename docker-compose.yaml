services:
  api1:
    hostname: api1
    build:
      context: .
      target: dev
    command: npm run dev
    ports:
      - '8888'
    user: node
    volumes:
      - ./:/opt/node_app/app
      - notused:/opt/node_app/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8888
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DATABASE=${DATABASE}
    depends_on:
      - db
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:8888 || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - application_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '1GB'

  api2:
    hostname: api2
    build:
      context: .
      target: dev
    command: npm run dev
    ports:
      - '8888'
    user: node
    volumes:
      - ./:/opt/node_app/app
      - notused:/opt/node_app/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8888
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DATABASE=${DATABASE}
    depends_on:
      - db
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:8888 || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - application_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '1GB'

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      api1:
        condition: service_healthy
      api2:
        condition: service_healthy
    ports:
      - '8080:8080'
    networks:
      - application_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '1GB'

  db:
    image: 'postgres:16.1'
    restart: always
    ports:
      - '5432:${DB_PORT}'
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DATABASE}
    networks:
      - application_network
    volumes:
      - ./init-db:/docker-entrypoint-initdb.d
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '5GB'

networks:
  application_network:
    driver: bridge

volumes:
  notused:
